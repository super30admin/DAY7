/*class Solution {
    public int coinChange(int[] coins, int amount) {
       // if (coins == null) return -1; //null condition
        return helper(amount,coins,0,0);
    }
    private int helper (int amount, int [] coins, int index,int coinsUsed) {
        //base or termination condition
        if (amount == 0) return coinsUsed;
        if (amount < 0 || index == coins.length) return -1;
        //logic
        //choose
        int case1 = helper(amount - coins[index], coins, index, coinsUsed +1) ; //when choosen, coins will be used, and amount will be reduced
        // not chosse
        int case2 = helper(amount, coins, index+1,coinsUsed); //when not choosing, amount, coinUsed will be same while we move on to other coins
        if (case1 == -1) return case2; 
        if (case2 == -1) return case1;
        return Math.min(case1,case2);
    }
} */

//DP 
//Time Complexity: O(m*n)
//Space Complexity: O(m*n)
//Did it pass through all testcases LeetCode: Yes

class Solution {
    public int coinChange(int[] coins, int amount) {
    
        int [][]dp = new int[coins.length+1][amount+1];
        dp[0][0] = 0;
        //first row - dummy row
        for(int j=1; j<dp[0].length; j++) {
            dp[0][j] = amount+1;
        }
        for (int i = 1; i< dp.length; i++) {
            for (int j= 1; j<dp[0].length;j++) {
                //if amount is less than the coin denomination
                if (j< coins[i-1]) {
                    dp[i][j] = dp[i-1][j];
                } else {
                    dp [i][j] = Math.min(dp[i-1][j], dp[i][j - coins[i-1]]+1);
                }
            }
        }
        int result = dp [dp.length-1][dp[0].length-1]; 
        if ( result > amount) return -1; //if it is not found, table result will be infinite, so returning -1 in that case
        else return result;
     }
}
