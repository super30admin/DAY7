// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach

class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0) return 0;      // if there are no houses then return 0
        
        // if there is only house then rob it
         if(nums.length == 1) return nums[0]; 

        int[] dp = new int[nums.length]; // intilaize dp array of length of nums array
        
        dp[0] =nums[0]; // the first value of dp is the first value of nums array
        dp[1] = Math.max(nums[1],nums[0]); // now the next value of dp array is max of nums[1] or nums[0]
        
        // now iterating over nums array for nums.length times starting from index 2
        
        for(int i = 2; i<nums.length;i++)
            dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i]); // the dp at current index is max of previous value or current plus value previous to previous value
        
        return dp[nums.length-1]; // the end of dp is the max value that robber can rob and its returned
    }
}