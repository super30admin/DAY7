// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach

Solution 1 - Greedy solution
I can take alternate elements and can find the max sum and return as its result -
Eg - [2, 7, 9, 8, 1]
Take alternate - > 2 + 9 + 1 = 12    &&      7 + 8 = 15
max(12, 15) = 15
output -> 15

But this will fail in some cases like [2, 1, 1, 3]
Take alternate sum -> 2 + 1 = 3      &&       1 + 3 = 4
max(3, 4) = 4
output -> 4
But this is wrong as the output should be 5 taking values [2, 3]
Here our any kind of Greedy solution will definitely fail

Solution 2 - 
Exhaustive approach - TC - O(2 ^ n) where n - size of array,   SC - O(n)
    public int rob(int[] nums) {
        if(nums == null) return 0;
        return helper(nums, 0, 0);
    }
    
    private int helper(int[] nums, int index, int amount)
    {
        // base case
        if(index >= nums.length) return amount;
        
        // choose
        int case1 = helper(nums, index + 2, amount + nums[index]);
        
        // not choose
        int case2 = helper(nums, index + 1, amount);
        
        return Math.max(case1, case2);
    }
    
Solution 3 - 
Bottom up approach - TC - O(n)   SC - O(n)   n - length of nums
Eg - nums = [2, 7, 9, 1, 1, 5]

              0                                                     1                                     index choosen/not choosen
              
        2     0                                                     2                                             1
        7     2[index = 1]                                          0 + 7 = 7[index = 0]                          0
        9     (max of prev values(2, 7)) = 7[index = 1]             2 + 9 = 11[index = 0]                         1
        1     (max of prev values(7, 11)) = 11[index = 1]           7 + 1 = 8[index = 0]                          0
        1     (max of prev values(11, 8)) = 11[index = 0]           11 + 1 = 12[index = 0]                        0
        5     (max of prev values(11, 12)) = 12[index = 1]          11 + 5 = 16[index = 0]                        1

output = max(12, 16) = 16
So 2, 9, 5 are the values that will be choosen and will give output = 16

class Solution {
    public int rob(int[] nums) {
        if(nums == null) return 0;
        int[][] dp = new int[nums.length][2];
        dp[0][1] = nums[0];
        
        for(int i = 1; i < nums.length; i++)
        {
            // not choose
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            
            // choose
            dp[i][1] = dp[i - 1][0] + nums[i];
        }
        return Math.max(dp[nums.length - 1][0], dp[nums.length - 1][1]);
    }
}

This approach is going to take O(n) space. 
Further optimization can be to use only 2 variables - choose and not choose instead of dp array and override the values for every computation


Solution 4 - 
Using skip(not choose) and take(choose) variables instead of dp array  - TC - O(n)  SC - O(1)

class Solution {
    public int rob(int[] nums) {
        if(nums == null) return 0;
        int skip = 0;
        int take = nums[0];
        
        for(int i = 1; i < nums.length; i++)
        {
            int prev_skip = skip;
            // not choose
            skip = Math.max(skip, take);
            
            // choose
            take = prev_skip + nums[i];
        }
        return Math.max(skip, take);
    }
}
