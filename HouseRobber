class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(nums.length==0 || nums == null){
            return 0;
        }
        int[][] dp = new int[n][2];
        
        dp[0][0] = nums[0];
        dp[0][1] = 0;
        for(int i=1;i<n;i++){
            for(int j=0;j<2;j++){
                if(j==0){
                    dp[i][0] = dp[i-1][1] + nums[i];
                }
                else{
                    dp[i][1] = Math.max(dp[i-1][0],dp[i-1][1]); 
                }
            }
        }
        return Math.max(dp[n-1][0],dp[n-1][1]);
    }
}

//Time Complexity: O(n * 2) = O(2) // Order of n for i and 2 for j
// Space complexity : O(n*m) = O(n)

//Leetcode : Accepted
