# Time Complexity : O(n*m), n = number of distinct denominations available, m = amount given
# Space Complexity : O(n*m)
# Did this code successfully run on Leetcode : Yes
# Any problem you faced while coding this : 1+ hour to converge to correct base case values

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
    
        dp = [[0 for _ in range(amount+1)] for _ in range(len(coins)+1)]
        
        for i in range(len(coins)+1):
            for j in range(amount+1):
                if j == 0:
                    continue
                if i == 0:
                    dp[i][j] = float("inf")
                    continue
                if coins[i-1] <= j:
                    dp[i][j] = min(1 + dp[i][j-coins[i-1]], dp[i-1][j])
                else:
                    dp[i][j] = dp[i-1][j]

        return dp[-1][-1] if dp[-1][-1] != float("inf") else -1