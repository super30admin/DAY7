// Time Complexity : O(1)
// Space Complexity : O(coins.length)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach

class Solution {
    public int coinChange(int[] coins, int amount) {
        
        
        
        
        int dp[][]=new int[coins.length+1][amount+1];  // to store 0
        
       
        
        for (int i=0;i<=coins.length;i++)
        {
            dp[i][0]=0;
        }
        
        for(int j=1;j<=amount;j++)
        {
            dp[0][j]=9999;
        }
        
        for(int i=1;i<=coins.length;i++)
        {
            for (int j=1;j<=amount;j++)
            {
                if (j<coins[i-1])
                {
                    dp[i][j]=dp[i-1][j];     //copy from the previous row
                }
                
                else    // when the amount is higher than the coin value available
                {
                    
                    dp[i][j]= Math.min(dp[i-1][j], 1+dp[i][j-coins[i-1]]);
                }
            }
        }
        int result = dp[coins.length][amount];
         if (result>=9999) return -1;
            
        else return result;
        
        
        
    }
}