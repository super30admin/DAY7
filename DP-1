class Solution {
    public int rob(int[] nums) {
        
        int[][] path = new int[nums.length][2];
        int notTake = 0;
        int take = nums[0];
        for(int i=1; i<nums.length; i++)
        {
           
            int temp  = Math.max(notTake, take);
            path[i][0] = Math.max(notTake, take) == notTake ?0:1;
            take = notTake + nums[i];
           notTake = temp;
             path[i][1] = 0;
            // path[i][1] = 0;
            //System.out.println(i+" "+result[i][0]+" "+result[i][1]);
            //path[i][0] = Math.max(result[i-1][0], result[i-1][1]) == result[i-1][0] ?0:1;
            
        }
        StringBuilder s = new StringBuilder();
        s = Math.max(notTake, take) == notTake ?0:1
        
        return Math.max(notTake, take);
    }
}

class Solution {
    public int coinChange(int[] coins, int amount) {
        
        int[][] dp = new int[coins.length+1][amount+1];
        for(int j=1; j<dp[0].length; j++)
        {
            dp[0][j] = amount +1;
        }
        
        for(int i=1; i<dp.length; i++)
        {
            for(int j=1; j<dp[0].length; j++)
            {
                if(coins[i-1] >j)
                {
                    dp[i][j] = dp[i-1][j];
                }
                else
                {
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j]);
                }
            }
        }
        
        if(dp[dp.length-1][dp[0].length-1] == amount +1)
            return -1;
        
        return dp[dp.length-1][dp[0].length-1];
    }
    
   
}
