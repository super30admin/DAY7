//time complexity : O(m*n)
//space complexity: O(m+n)
//successfully executed on leetcode

class CoinChangeOptimal {
    public int coinChange(int[] coins, int amount) {
        int m= coins.length;
        int n = amount;
        int[][] dp = new int[m+1][n+1];
        dp[0][0]=0;

        //inserting max value in the first row
        for(int i=1;i<=n; i++){
            dp[0][i]=amount+1;
        }
        //iterating over the rows and columns
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                // if current column is less than coin, then previous coin will be update in 
                //the same column
                if(j<coins[i-1]){
                    dp[i][j]=dp[i-1][j];
                }
                else{
                   //find the minimum and update the column with (1 + (currentColumn-coin))
                    dp[i][j]= Math.min(dp[i-1][j], dp[i][j-coins[i-1]]+1);
                }
            }
        }
        //if there is no coin meets the target then, return -1 
        if(dp[m][n]==amount+1){
            return -1;
        }
        return dp[m][n];
    }
}
