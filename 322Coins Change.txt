322. Coin Change

class Solution {
    //TC = O(m*n),  SC = O(m*n) 
    public int coinChange(int[] coins, int amount) {
        int[][] dp=new int[coins.length+1][amount+1];
        dp[0][0]=0;
        for(int j=1;j<=amount;j++){
            dp[0][j]=99999;
        }

        for(int i=1;i<=coins.length;i++){
            for(int j=1;j<=amount;j++){
                //till denomination of coin > amount I have 0 case
                if(coins[i-1]>j){
                    dp[i][j]=dp[i-1][j];
                }else{
                    //0 and 1 case
                    dp[i][j]=Math.min(dp[i-1][j],1+dp[i][j-coins[i-1]]);
                }
            }

        }
    if(dp[coins.length][amount]>=99999) return -1;
    return dp[coins.length][amount];


    }
}



//Brute Force Solution
class Solution {
    //Time Comp = O(2^m+n);where m=input length array, n= target
    //arr[1,2,3] target=11 then (2^3+11)
    public int coinChange(int[] coins, int amount) {
        return helper(coins,0,amount,0);
    }
    private int helper(int[] coins,int idx,int amount, int coinsUsed){

        //base 
    if(amount==0){
        return coinsUsed;
    }
    if(amount<0 || idx==coins.length){
return -1;
    }
        //logic
        //coins used
        int case1=helper(coins,idx,amount-coins[idx],coinsUsed+1);
        //don't use
        int case2=helper(coins,idx+1,amount,coinsUsed);

        if(case1==-1)return case2;
        if(case2==-1)return case1;
    return Math.min(case1,case2);

    }
}