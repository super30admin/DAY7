//TimeComplexity O(mn) -> nested loop
//SpaceComplexity O(mn) -> 2d array
class Solution {
    public int coinChange(int[] coins, int amount) {
        if(coins.length == 0)return -1;
        int m = coins.length;
        int n = amount;
        int[][] dp = new int[m+1][n+1];   
        dp[0][0] = 0;
        for(int i = 1 ; i < dp[0].length; i++){
            dp[0][i] = amount+1;
        }
        for(int i = 1 ; i < m+1; i++){
            for(int j =1; j <n+1; j++){
                if(j < coins[i-1]){
                    dp[i][j] = dp[i-1][j];
                }else{
                    dp[i][j] = Math.min(dp[i-1][j], (dp[i][j-coins[i-1]]+1));
                }
            }
        }
        if(dp[m][n]> amount){
            return -1;
        }
            return dp[m][n];
        
    }
}
