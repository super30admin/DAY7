// Time Complexity :O(m * n)
// Space Complexity :O(m * n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

// using two dim array and storing all possible scenarios 

class Solution {
    public int coinChange(int[] coins, int amount) {
        
        if(coins == null && coins.length ==0) return 0;
        
       
        
        int dp[][] = new int[coins.length+1][amount+1];
        
        int max = amount+1;
        dp[0][0] =0;

// assign max value to all dp[0][j]
        for(int i =1;i<amount+1;i++)
        {
            dp[0][i] = max;
        }
        
        for(int i =1;i<coins.length+1;i++)
        {
            for(int j=0 ;j<amount+1;j++)
            {
                if(j < coins[i-1])
                {
                    dp[i][j] = dp[i-1][j];
                }
                else{
                    dp[i][j] = Math.min(dp[i-1][j], 1+dp[i][j-coins[i-1]]);
                }
            }
        }
//if last value in matrix is equal to max , then return -1
        if(dp[coins.length][amount] == max)
        {
            return -1;
        }
        return dp[coins.length][amount];
        
    }
}