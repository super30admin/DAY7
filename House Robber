class Solution{
    public int rob(int[] nums){
        
        int n = nums.length;
        if(n<2) return nums[0];
        int [] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0],nums[1]);
        for(int i = 2; i < nums.length; i++){
            dp[i] = Math.max(dp[i-1], nums[i]+dp[i-2]);
        }
        return dp[n-1];



    }





}















/*class Solution {
    public int rob(int[] nums) {
        //null
        return helper(nums, 0, 0);
        
    }
    private int helper(int []nums, int idx, int robbings){
        //base
        if(idx >= nums.length) return robbings;

        //logic
        //choose
        int x = helper(nums, idx + 2, robbings + nums[idx]);

        //dont choose
        int y = helper(nums, idx + 1, robbings);
        return Math.max(x,y);


    }
}*/
