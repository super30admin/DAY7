Approach 1 : Brute Force by tree structure
Time Complexity : O(2^n).  : Each node we have two children. 
Space Complexity : O(n)

Approach 2: Since we have repeated sub problems. We can do DP
Time Complexity:O(n) Iterate through the entire array and finidng the max
Space complexity : O(n) 

class Solution:
    def rob(self, nums: List[int]) -> int:
        if nums == [] or len(nums)==0:
            return 0
        if len(nums)==1:
            return nums[0]
        dp=[[0]*(len(nums)),[0]*2]
        dp[0][0]=0
        dp[0][1]=nums[0]
        for i in range(1,len(nums)):
            dp[i][0]=max(dp[i-1][0],dp[i-1][1])
            dp[i][1]=dp[i-1][0]+nums[i]
        return max(dp[len(nums)-1][0],dp[len(nums)-1][1])
