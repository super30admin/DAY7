//Time Complexity : O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if(coins.size()==0) return 0;
        if(amount<=0 ) return 0;
                
        int rows = coins.size()+1;
        int cols = amount+1;
        vector<int> res;
        
        int dp[rows][cols];
        
        for(int i=0; i<cols; i++){            
            dp[0][i]=amount+1;
        }
        
        for(int i=1; i<rows;i++){
            int denomination = coins[i-1];
            for(int j=0; j<cols; j++){
                if(j<denomination){
                    dp[i][j] = dp[i-1][j];
                }
                else{
                    if(denomination==j){
                        dp[i][j]=1;
                    }
                    else{
                        int val1 = dp[i][j-denomination]+1;
                        int val2 = dp[i-1][j];
                        if(val1>val2)
                            dp[i][j]=val2;
                        else
                            dp[i][j]=val1;
                        
                    }
                }
            }                   
        }
        
       /*for(int i=0; i<rows; i++){
           res.push_back(dp[i][amount]);
       }
        
        sort(res.begin(), res.end());
        if(res[0]==amount+1)
            return -1;
        
        return res[0];*/
        if(dp[rows-1][amount] == amount+1)
            return -1;
        
        return dp[rows-1][amount];
    }
};