# -*- coding: utf-8 -*-
"""Coin Change.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DfRlN5ZFd_y398AEHhlq3EuiTX94djM1
"""

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        row,col = len(coins)+1, amount+1
        dp = [[0 for x in range(col)] for y in range(row)] 
        
        #storing infinity(greater than given amount) in 1st row when coin value is 0
        for j in range(1,col):
            dp[0][j] = amount+1
            
        for i in range(1,row):
            for j in range(1,col):
                if(j < coins[i-1]):
                    #j is the amount and if it is less than coins value then just copy from row above
                    dp[i][j] = dp[i-1][j]
                
                else:
                    #choose min of row above or use 1 coin in this row and get coins cal back at index amt-coinvalue
                    dp[i][j] = min( dp[i-1][j], 1+dp[i][j- coins[i-1]] )
        # if amount is greater than given amount then return -1             
        if( dp[row-1][col-1] == amount+1): return -1 
        #return the last row and col
        return dp[row-1][col-1]