// TC = O(n)
// SC = O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Had to look up the storing of the values for each value of array condition i.e a[i]=Math.max(nums[i]+a[i-2], a[i-1]);


class Solution {
    public int rob(int[] nums) {
        
        int n=nums.length;
        
        if(n==0) return 0;
        if(n==1) return nums[0];
        
        int a[]=new int[n];
       
        a[0]=nums[0];
        a[1]=Math.max(nums[0],nums[1]);
        
        for(int i=2;i<n;i++)
            a[i]=Math.max(nums[i]+a[i-2], a[i-1]);
        
        return a[n-1];
    }
}



/*


// Failed when max values are not adjacent and can be even and odd indexes i.e failed if arr = [2,1,1,2]

class Solution {
    public int rob(int[] nums) {
        
        int n = nums.length;
        
        int sum_even = 0;
        int sum_odd  = 0;
        
        int max = 0;
        
        if ( n == 0)
            return 0;
        
        for (int i = 0; i < n ; i=i+2){
            
            sum_even = sum_even + nums[i];
        }
        
         for (int i = 1; i < n ; i=i+2){
            
            sum_odd = sum_odd + nums[i];
        }
        
        max = Math.max(sum_even, sum_odd);
        
        
        return max;
    }
}




*/