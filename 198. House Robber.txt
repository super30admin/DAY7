// Time Complexity : O(n)
// Space Complexity : O(n) for one solution and O(1) for second
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no
//we maximize the amount of robbery here with the constraint that we cant rob 2 adjacent houses
//so we need to keep check on whether the previous house was robbed or not
//this is not for first house so we simoly start with intial 2 values for home 1 as robbed and //not robbed
//then for each sub sequent houses we check what could have been the max amound if this house is robbed(given that we are selcting situation where previous house was not robbed) or
//if we dont rob this house then we need to coose max from previous house's both condition 0 & 1

//this can be done using an array keeping track of not choosimng at 0 index and choosing at 1 //index

//or this can be done using two variables skip and take which maintain max till previos index
//for not robbing it and robbnig it at skip and take respectively

//Below solution with tc O(n) ans sc O(n)
// class Solution {
//     public int rob(int[] nums) {
        
//         int [][] dp = new int[nums.length][2];
//        // dp[0][0]=0;
//         dp[0][1]=nums[0];
        
//         for(int i=1; i<nums.length; i++){
            
//             //not choose
//             dp[i][0]=Math.max(dp[i-1][0], dp[i-1][1]);
            
//             //choose
//             dp[i][1]=dp[i-1][0] + nums[i];
//         }
        
//         return Math.max(dp[dp.length-1][0],dp[dp.length-1][1]);
        
//     }
// }

//Below solution with tc O(n) ans sc O(1)
class Solution {
    public int rob(int[] nums) {
        
        //int [][] dp = new int[nums.length][2];
       int skip=0;
       int take=nums[0];
        
        for(int i=1; i<nums.length; i++){
            int temp_skip = skip;
            //not choose
            skip=Math.max(skip, take);
            
            //choose
           take=temp_skip + nums[i];
        }
        
        return Math.max(take, skip);
        
    }
}