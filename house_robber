// Time Complexity : O(N)
// Space complexity : O(N)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// Approach
/*
For every element count the amount if that element is considered and not considered
If the element is not considered, the total amount will be the max of prev element amount if its taken and not taken
If the element is considered, sum up current amount and prev element amount if it is not considered
*/

class Solution {
public:
    int rob(vector<int>& nums) {
        vector<vector<int>> res(nums.size(), vector<int> (2, 0));
        res[0][1] = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            for(int j = 0; j < 2; j++) {
                if(j == 0) {
                    res[i][j] = max(res[i - 1][j], res[i - 1][j + 1]);
                } else {
                    res[i][j] = nums[i] + res[i - 1][j - 1];
                }
            }
        }
        return max(res[nums.size() - 1][0], res[nums.size() - 1][1]);
    }
};