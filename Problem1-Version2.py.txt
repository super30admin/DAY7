# Time Complexity : O(n*m), n = number of distinct denominations available, m = amount given
# Space Complexity : O(m)
# Did this code successfully run on Leetcode : Yes
# Any problem you faced while coding this : 1+ hour to converge to correct base case values

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0
        
        for i in range(len(coins)):
            for j in range(1, amount+1):
                if coins[i] <= j:
                    dp[j] = min(1 + dp[j-coins[i]], dp[j])
        
        return dp[-1] if dp[-1] != float('inf') else -1