class Solution {
    public int coinChange(int[] coins, int amount) {
        if(coins.length==0 || coins==null) return 0;
        int[][] dp = new int[coins.length+1][amount+1];
        for(int j=1;j<dp[0].length;j++){
            dp[0][j]=amount+1;
        }
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){
                if(coins[i-1]>j){
                    dp[i][j]=dp[i-1][j];
                }else{
                    dp[i][j]=Math.min(dp[i-1][j], dp[i][j-coins[i-1]]+1);
                }
            }
        }
       
        return dp[dp.length-1][dp[0].length-1]>=amount+1?-1:dp[dp.length-1][dp[0].length-1];
    }
}
// Approach : Used 2D matrix since there are 2 changing variables 
//Time Complexity: O(nxm) - n=coins.length , m= amount
//Space Complexity: O(nxm)
